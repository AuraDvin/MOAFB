[gd_scene load_steps=6 format=2]

[ext_resource path="res://Scripts/Player/Player.tscn" type="PackedScene" id=1]
[ext_resource path="res://Assets/TileSet.tres" type="TileSet" id=2]
[ext_resource path="res://Scripts/CaveGeneration/caveGenerator.tscn" type="PackedScene" id=3]

[sub_resource type="GDScript" id=2]
resource_name = "Test"
script/source = "extends Node2D

var rng = RandomNumberGenerator.new()
var mobs_spawned = 0
var mob_scene = preload(\"res://Scripts/Enemy/enemy.tscn\")
var player_scene = preload(\"res://Scripts/Player/Player.tscn\")

onready var player = $Player
onready var nav = $Navigation2D

func _on_Timer_timeout():
#	print(\"timer call\")
	get_tree().call_group(\"Enemy\", 'get_target_path', player.global_position)
	
# TODO: 
# Player spawn on proper location
# Enemy spawn on proper location


func _ready():
#	var last_index = AutoLoad.get_last_spawnable_index()
#	var old_mob_count = -1
	
#	if last_index == null or last_index == NAN:
#		AutoLoad.auraLog(\"rip\")
#		return
	
	var last_spawn = [0]
	var player_spawn = AutoLoad.spawnable_locations[0]
	AutoLoad.spawnable_locations.remove(0)
	spawn_player(player_spawn)
	
	for i in range(1):
		rng.randomize()
		var index = rng.randi_range(0, AutoLoad.get_last_spawnable_index())
		var spawn = AutoLoad.spawnable_locations[index]
		while last_spawn.has(index):
			index = rng.randi_range(0, AutoLoad.get_last_spawnable_index())
			spawn = AutoLoad.spawnable_locations[index]
		last_spawn.append(index)
		spawn_mob(spawn)

##	for i in range(10):
#		rng.randomize()
#		var index = rng.randi_range(1, last_index)
#		var spawn_position = AutoLoad.spawnable_locations[index]
#		for j in last_spawn:
#			if j.x - spawn_position.x > 400:
##				AutoLoad.auraLog(\"true\")
#				mobs_spawned += 1
#				spawn_mob(spawn_position)
#				AutoLoad.spawnable_locations.remove(spawn_position)
#				break
#		if abs(old_mob_count - mobs_spawned) <= 0:
#			i -= 1
#		else:
#			old_mob_count = mobs_spawned
#		if i < 0:
#			print(i)
#	$Camera2D.set_global_position(spawn_position)
	
func spawn_mob(location):
	var mob = mob_scene.instance()
	call_deferred(\"add_child\", mob)
	mob.set_global_position(location)
#	print(\"Spawned\")

func spawn_player(location):
#	var player = $Player
#	call_deferred(\"add_child\", player)
	player.set_global_position(location)


func _on_caveGenerator_finished_generating():
	print (AutoLoad.spawnable_locations)
	pass # Replace with function body.


func _on_Area2D_body_entered(body):
	var position = body.get_global_position()
	position.y = -100
	body.set_global_position(position)

"

[sub_resource type="RectangleShape2D" id=3]
extents = Vector2( 1808.25, 497 )

[node name="tempScene" type="Node2D"]
script = SubResource( 2 )

[node name="Player" parent="." instance=ExtResource( 1 )]
position = Vector2( -45, -19 )
z_index = 1

[node name="Navigation2D" type="Navigation2D" parent="."]
scale = Vector2( 4, 4 )

[node name="TileMap" type="TileMap" parent="Navigation2D" groups=["tilemap"]]
tile_set = ExtResource( 2 )
cell_size = Vector2( 16, 16 )
collision_layer = 3
collision_mask = 3
bake_navigation = true
format = 1

[node name="caveGenerator" parent="Navigation2D/TileMap" instance=ExtResource( 3 )]
map_width = 20
map_height = 20

[node name="Area2D" type="Area2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
position = Vector2( 479.75, 1106 )
shape = SubResource( 3 )

[node name="Timer" type="Timer" parent="."]
autostart = true

[connection signal="cursor_visibility" from="Player" to="Navigation2D/TileMap/caveGenerator" method="_on_Player_cursor_visibility"]
[connection signal="mine_block" from="Player" to="Navigation2D/TileMap/caveGenerator" method="_on_Player_mine_block"]
[connection signal="move_smart_cursor" from="Player" to="Navigation2D/TileMap/caveGenerator" method="_on_Player_move_smart_cursor"]
[connection signal="finished_generating" from="Navigation2D/TileMap/caveGenerator" to="." method="_on_caveGenerator_finished_generating"]
[connection signal="body_entered" from="Area2D" to="." method="_on_Area2D_body_entered"]
[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
